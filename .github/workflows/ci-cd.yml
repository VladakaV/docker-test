name: Docker CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  DOCKER_IMAGE: ghcr.io/vladakav/docker-test
  APP_PORT: 60080
  CONTAINER_PORT: 8049

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./docker-test
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  test:
    needs: build-and-push   # üëâ —Ç–µ–ø–µ—Ä—å —Ç–µ—Å—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–±–æ—Ä–∫–∏
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          
      - name: Install dependencies
        run: |
          cd docker-test
          pip install .[test]
          pip install pytest httpx

      - name: Debug Python path
        run: |
          echo $PYTHONPATH
          ls -la
          
      - name: Run tests
        run: |
          cd docker-test/tests
          PYTHONPATH=${{ github.workspace }}/docker-test/src pytest -v

  deploy:
    needs: test   # üëâ —Ç–µ–ø–µ—Ä—å –¥–µ–ø–ª–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ—Å—Ç–æ–≤
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no -p 58529 dirac@kubsu.tyvik.ru "
            docker pull ${{ env.DOCKER_IMAGE }}:latest &&
            docker stop app || true &&
            docker rm app || true &&
            docker run -d --name app -p ${{ env.APP_PORT }}:${{ env.CONTAINER_PORT }} ${{ env.DOCKER_IMAGE }}:latest
          "
